

upstream backend_superthinking {
   server 127.0.0.1:5001;
   keepalive 32;
}

server {
  listen 80 ;
  server_name  superthinkingup.com  ;

  access_log  logs/www.superthinkingup.com_http.log  main;

  return 301 https://$server_name$request_uri;
}
server {
  listen 80 ;
  server_name  www.superthinkingup.com  ;

  access_log  logs/www.superthinkingup.com_http.log  main;

  return 301 https://superthinkingup.com$request_uri;
}
server {
   listen 443 ssl ;
   listen [::]:443 ssl ;
   server_name  www.superthinkingup.com ;

   ssl_certificate /opt/openresty/sslkey/all_subdomain_superthinkingup.pem;
   ssl_certificate_key     /opt/openresty/sslkey/all_subdomain_superthinkingup.key;
	
   access_log  logs/www.superthinkingup.com_http.log  main;

   return 301 https://superthinkingup.com$request_uri;
}


server {
   listen 443 ssl default_server ;
   listen [::]:443 ssl ;
   server_name  superthinkingup.com  ;
	
    root /opt/openresty/openresty_build_bin/nginx/html/superthinking;
   ##root html;
   index index.html;
   access_log  logs/superthinkingup.com_https.log  main;
   error_log logs/superthinkingup.com_https_error.log  error;
	#http2
   #http2_push_preload on; # Enable HTTP/2 Server Push
	
   ssl_certificate /opt/openresty/sslkey/all_subdomain_superthinkingup.pem;
   ssl_certificate_key /opt/openresty/sslkey/all_subdomain_superthinkingup.key;
   ssl_session_timeout 1d;

   # Enable TLS versions (TLSv1.3 is required upcoming HTTP/3 QUIC).
   
  # 默认情况下，Nginx使用ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3和ssl_ciphers #HIGH:!aNULL:!MD5，这通常不需要显式配置，因为它们已经提供了强大的安全性


   # ssl_protocols TLSv1.2 TLSv1.3;

   # Enable TLSv1.3's 0-RTT. Use $ssl_early_data when reverse proxying to
   # prevent replay attacks.
   #
   # @see: https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_early_data
   #ssl_early_data on;

   #ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384';
  # ssl_prefer_server_ciphers on;
   #ssl_session_cache shared:SSL:50m;
   # HSTS (ngx_http_headers_module is required) (15768000 seconds = six months)
   #add_header Strict-Transport-Security max-age=15768000;
   # OCSP Stapling ---
   # fetch OCSP records from URL in ssl_certificate and cache them
   #ssl_stapling on;
   #ssl_stapling_verify on;

  # add_header X-Early-Data $tls1_3_early_data;
  
  
    gzip on;  # 开启 gzip 压缩
	gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml application/x-httpd-php font/ttf font/otf ;  # 指定压缩的 MIME 类型
	gzip_comp_level 6;  # 设置 gzip 压缩级别，1（最快）到 9（最小）9是最高压缩率但占用CPU较多
	gzip_vary on;  # 根据请求的Accept-Encoding头信息来判断是否启用gzip


   location ~ /chat/api/v[0-9]+/(users/)?websocket$ {
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "upgrade";
       client_max_body_size 50M;
       proxy_set_header Host $host;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-Forwarded-Proto $scheme;
       proxy_set_header X-Frame-Options SAMEORIGIN;
       proxy_buffers 256 16k;
       proxy_buffer_size 16k;
       client_body_timeout 60s;
       send_timeout 300s;
       lingering_timeout 5s;
       proxy_connect_timeout 90s;
       proxy_send_timeout 300s;
       proxy_read_timeout 90s;
       proxy_http_version 1.1;
       proxy_pass http://backend;
   }
 
   
   location ~ ^((/answer/api/)|(/answer/admin/api)|(/sitemap.xml)|(/custom.css)|(/robots.txt)|(/404)|(/opensearch.xml)|(/robots.txt)) {
       client_max_body_size 100M;
       proxy_set_header Connection "";
       proxy_set_header Host $host;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-Forwarded-Proto $scheme;
       proxy_set_header X-Frame-Options SAMEORIGIN;
       proxy_buffers 256 16k;
       proxy_buffer_size 16k;
       proxy_read_timeout 600s;
      # proxy_http_version 1.1;
       proxy_pass http://backend_superthinking;
   }
   location / {
   
		proxy_set_header Connection "";
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Frame-Options SAMEORIGIN;
		proxy_buffers 256 16k;
		proxy_buffer_size 16k;
		proxy_read_timeout 600s;
		  # proxy_http_version 1.1;
		
		 #爬虫转发
		if ($http_user_agent ~* "(Baiduspider|baiduspider|Baiduspider-render|bcebos-spider-1.0|baiduboxapp|360Spider|Sogou|Sogou web spider|Yisouspider|Googlebot|yahoo|ToutiaoSpider|bytespider|bingbot|YandexBot|Sosospider)") {
			 
			 proxy_pass http://backend_superthinking;
			 break;
		}
		  
  
		try_files $uri $uri/ /index.html;
		   #如果不写上 $uri/，当直接访问一个目录路径时，并不会去匹配目录下的索引页  即 访问127.0.0.1/images/ 不会去访问  127.0.0.1/images/index.html 

		#if (!-e $request_filename) {
		#	
		#    proxy_pass http://backend_superthinking;
		#}

   }
   
    location ^~ /assets/ {  #^~ 表示uri以某个常规字符串开头,大多情况下用来匹配url路径
                #gzip_static on;
               
                add_header Cache-Control public;
				
				 expires 1y;
				try_files $uri $uri/ 404;
	
    }
	location = /baidu_verify_codeva-VDWlZdFZFa.html {
		root html;
		
	}
 
}

